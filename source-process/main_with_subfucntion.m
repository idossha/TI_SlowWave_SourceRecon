function main()
% MAIN: Example pipeline integrating Brainstorm steps
%   1) Start Brainstorm
%   2) Import anatomy
%   3) Import main EEG
%   4) Import noise EEG (but do not compute cov yet)
%   5) Overwrite channel file for ALL data
%   6) Compute noise covariance
%   7) Generate BEM (optional)
%   8) Compute Head Model
%   9) sLORETA
%   10) Scout extraction + export CSV

    %% === [0] START BRAINSTORM NO-GUI
    disp('=== STEP 0: Checking/Starting Brainstorm in no-GUI mode... ===');
    if ~brainstorm('status')
        brainstorm nogui;
    end
    disp('Successfully started Brainstorm in no-GUI mode.');

    %% == USER SETTINGS
    SubjectName    = 'NewSubject';
    AnatDir        = 'C:\project824\m2m_001';

    MainEEGFile    = 'C:\Users\15825\Desktop\test\epoch-data\proto1_pre-stim_sw1_E2.set';
    EventName      = 'NegPeak';
    EpochTime      = [-0.05, 0.05];

    NoiseEEGFile   = 'C:\project824\bss\noise_eeg_data.set';
    NoiseTime      = [0, 84];

    ChannelFileXYZ = 'C:\project824\bss\Subject02.xyz';  % .xyz but 'EEGLAB' format
    GenerateBEMSrf = true;

    sLORETA_Comment= 'sLORETA: EEG';

    % Automatic CSV naming
    [~, eegBaseName] = fileparts(MainEEGFile);
    AutoCSV          = [eegBaseName, '_scouts.csv'];

    % === RUN STEPS:
    importAnatomy(SubjectName, AnatDir);                            % 1) Import Anatomy
    importMainEEG(SubjectName, MainEEGFile, EventName, EpochTime);  % 2) Import main EEG
    importNoiseEEG(SubjectName, NoiseEEGFile, NoiseTime);           % 3) Import noise EEG
    overwriteChannelAll(SubjectName, ChannelFileXYZ);               % 4) Overwrite channel
    computeNoiseCov(SubjectName, NoiseTime);                         % 5) Compute noise cov
    if GenerateBEMSrf
        generateBEM(SubjectName);                                     % 6) BEM
    end
    computeHeadModel(SubjectName);                                    % 7) Head Model
    runSLORETA(SubjectName, sLORETA_Comment);                        % 8) sLORETA
    scoutExportCSV(SubjectName, AutoCSV);                            % 9) Scout + CSV

    disp('=== ALL STEPS COMPLETED SUCCESSFULLY ===');
end


%% ========================================================================
%  SUBFUNCTIONS
% ========================================================================

function importAnatomy(SubjectName, AnatDir)
    disp('=== STEP 1: Importing Anatomy ===');
    try
        bst_process('CallProcess', 'process_import_anatomy', [], [], ...
            'subjectname', SubjectName, ...
            'mrifile',     {AnatDir, 'FreeSurfer'}, ...
            'nvertices',   15000, ...
            'nas',         [127,213,139], ...
            'lpa',         [52,113,96], ...
            'rpa',         [202,113,91]);
        disp('Successfully imported anatomy.');
    catch me
        warning('Failed to import anatomy: %s', me.message);
        return;
    end
end


function importMainEEG(SubjectName, MainEEGFile, EventName, EpochTime)
    disp('=== STEP 2: Importing Main EEG (NegPeak event) ===');
    bst_report('Start', []);
    sFiles = bst_process('CallProcess', 'process_import_data_event', [], [], ...
        'subjectname', SubjectName, ...
        'condition',   'NegPeak', ...
        'datafile',    {{MainEEGFile}, 'EEG-EEGLAB'}, ...
        'eventname',   EventName, ...
        'timewindow',  [], ...
        'epochtime',   EpochTime, ...
        'split',       0, ...
        'createcond',  1, ...
        'ignoreshort', 0, ...
        'channelalign',0, ...
        'usectfcomp',  0, ...
        'usessp',      0, ...
        'freq',        [], ...
        'baseline',    [], ...
        'blsensortypes','MEG, EEG');
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Successfully imported main EEG around NegPeak.');
end


function importNoiseEEG(SubjectName, NoiseEEGFile, NoiseTime)
    disp('=== STEP 3: Import Noise EEG (no covariance yet) ===');
    sFiles = [];
    bst_report('Start', sFiles);
    sFiles = bst_process('CallProcess', 'process_import_data_time', sFiles, [], ...
        'subjectname', SubjectName, ...
        'condition',   'noise', ...
        'datafile',    {{NoiseEEGFile}, 'EEG-EEGLAB'}, ...
        'timewindow',  NoiseTime, ...
        'split',       0, ...
        'ignoreshort', 1, ...
        'channelalign',0, ...
        'usectfcomp',  0, ...
        'usessp',      0, ...
        'freq',        [], ...
        'baseline',    [], ...
        'blsensortypes','MEG, EEG');
    disp('Successfully imported noise EEG.');
end


function overwriteChannelAll(SubjectName, ChannelFileXYZ)
    disp('=== STEP 4: Setting channel file for all data (NewSubject/*) ===');
    sFiles = [];
    bst_report('Start', sFiles);

    % Process: Select data files in: NewSubject/*
    sFiles = bst_process('CallProcess', 'process_select_files_data', sFiles, [], ...
        'subjectname',   SubjectName, ...
        'condition',     '', ... % all subfolders
        'tag',           '', ...
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0, ...
        'outprocesstab', 'no');

    % Process: Set channel file
    sFiles = bst_process('CallProcess', 'process_import_channel', sFiles, [], ...
        'channelfile',  {ChannelFileXYZ, 'EEGLAB'}, ...
        'usedefault',   '', ...
        'channelalign', 1, ...
        'fixunits',     1, ...
        'vox2ras',      0);

    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Successfully set channel file for all data under "NewSubject/*".');
end


function computeNoiseCov(SubjectName, NoiseTime)
    disp('=== STEP 5: Compute Noise Covariance for "noise" condition ===');
    sFiles = [];
    bst_report('Start', sFiles);
    % Re-select the "noise" condition we just imported
    sFiles = bst_process('CallProcess', 'process_select_files_data', sFiles, [], ...
        'subjectname',   SubjectName, ...
        'condition',     'noise', ...
        'tag',           '', ...
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0, ...
        'outprocesstab', 'no');

    sFiles = bst_process('CallProcess', 'process_noisecov', sFiles, [], ...
        'baseline',       NoiseTime, ...
        'datatimewindow', NoiseTime, ...
        'sensortypes',    'MEG, EEG, SEEG, ECOG', ...
        'target',         1, ...
        'dcoffset',       1, ...
        'identity',       0, ...
        'copycond',       1, ...
        'copysubj',       1, ...
        'copymatch',      0, ...
        'replacefile',    1);
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Successfully computed noise covariance (and copied to other conditions).');
end


function generateBEM(SubjectName)
    disp('=== STEP 6: Generating BEM surfaces (scalp/skull/brain) ===');
    bst_report('Start', []);
    sFiles = bst_process('CallProcess', 'process_generate_bem', [], [], ...
        'subjectname', SubjectName, ...
        'nscalp',      1922, ...
        'nouter',      1922, ...
        'ninner',      1922, ...
        'thickness',   4, ...
        'method',      'brainstorm');
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Successfully generated BEM surfaces.');
end


function computeHeadModel(SubjectName)
    disp('=== STEP 7: Compute Head Model (OpenMEEG for EEG) ===');
    bst_report('Start', []);
    sFiles = bst_process('CallProcess', 'process_select_files_data', [], [], ...
        'subjectname',   SubjectName, ...
        'condition',     'NegPeak', ...
        'tag',           '', ...
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0, ...
        'outprocesstab', 'process1');

    sFiles = bst_process('CallProcess', 'process_headmodel', sFiles, [], ...
        'Comment',     '', ...
        'sourcespace', 1, ...
        'meg',         3, ...  % Overlapping spheres
        'eeg',         3, ...  % OpenMEEG BEM
        'ecog',        2, ...  % OpenMEEG BEM
        'seeg',        2, ...  % OpenMEEG BEM
        'openmeeg',    struct(...
             'BemFiles',     {{}}, ...
             'BemNames',     {{'Scalp','Skull','Brain'}}, ...
             'BemCond',      [1,0.0125,1], ...
             'BemSelect',    [1,1,1], ...
             'isAdjoint',    0, ...
             'isAdaptative', 1, ...
             'isSplit',      0, ...
             'SplitLength',  4000), ...
        'channelfile', '');
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Successfully computed the head model.');
end


function runSLORETA(SubjectName, sLORETA_Comment)
    disp('=== STEP 8: Running sLORETA (inverse) on NegPeak data... ===');
    sFiles = [];
    bst_report('Start', sFiles);
    sFiles = bst_process('CallProcess', 'process_select_files_data', sFiles, [], ...
        'subjectname',   SubjectName, ...
        'condition',     'NegPeak', ...
        'tag',           '', ...
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0, ...
        'outprocesstab', 'process1');

    sFiles = bst_process('CallProcess', 'process_inverse_2018', sFiles, [], ...
        'output',  2, ...
        'inverse', struct( ...
             'Comment',        sLORETA_Comment, ...
             'InverseMethod',  'minnorm', ...
             'InverseMeasure', 'sloreta', ...
             'SourceOrient',   {{'fixed'}}, ...
             'Loose',          0.2, ...
             'UseDepth',       0, ...
             'WeightExp',      0.5, ...
             'WeightLimit',    10, ...
             'NoiseMethod',    'reg', ...
             'NoiseReg',       0.1, ...
             'SnrMethod',      'fixed', ...
             'SnrRms',         1e-06, ...
             'SnrFixed',       3, ...
             'ComputeKernel',  1, ...
             'DataTypes',      {{'EEG'}}));
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('sLORETA computation done.');
end


function scoutExportCSV(SubjectName, AutoCSV)
    disp('=== STEP 9: Scout extraction => export CSV. ===');
    sFiles = [];
    bst_report('Start', sFiles);
    sFiles = bst_process('CallProcess', 'process_select_files_results', sFiles, [], ...
        'subjectname',   SubjectName, ...
        'condition',     '', ...
        'tag',           'sLORETA', ...
        'includebad',    0, ...
        'includeintra',  0, ...
        'includecommon', 0, ...
        'outprocesstab', 'process1');

    sFiles = bst_process('CallProcess', 'process_extract_scout', sFiles, [], ...
        'timewindow',     [-0.05, 0.05], ...
        'scouts',         {'DKT', {'caudalanteriorcingulate L', 'caudalanteriorcingulate R', 'caudalmiddlefrontal L', 'caudalmiddlefrontal R', 'cuneus L', 'cuneus R', 'entorhinal L', 'entorhinal R', 'fusiform L', 'fusiform R', 'inferiorparietal L', 'inferiorparietal R', 'inferiortemporal L', 'inferiortemporal R', 'insula L', 'insula R', 'isthmuscingulate L', 'isthmuscingulate R', 'lateraloccipital L', 'lateraloccipital R', 'lateralorbitofrontal L', 'lateralorbitofrontal R', 'lingual L', 'lingual R', 'medialorbitofrontal L', 'medialorbitofrontal R', 'middletemporal L', 'middletemporal R', 'paracentral L', 'paracentral R', 'parahippocampal L', 'parahippocampal R', 'parsopercularis L', 'parsopercularis R', 'parsorbitalis L', 'parsorbitalis R', 'parstriangularis L', 'parstriangularis R', 'pericalcarine L', 'pericalcarine R', 'postcentral L', 'postcentral R', 'posteriorcingulate L', 'posteriorcingulate R', 'precentral L', 'precentral R', 'precuneus L', 'precuneus R', 'rostralanteriorcingulate L', 'rostralanteriorcingulate R', 'rostralmiddlefrontal L', 'rostralmiddlefrontal R', 'superiorfrontal L', 'superiorfrontal R', 'superiorparietal L', 'superiorparietal R', 'superiortemporal L', 'superiortemporal R', 'supramarginal L', 'supramarginal R', 'transversetemporal L', 'transversetemporal R'}}, ...
        'flatten',        0, ...
        'scoutfunc',      'all', ...
        'pcaedit',        struct('Method','pca','Baseline',[-0.1,0],'DataTimeWindow',[0,1],'RemoveDcOffset','file'), ...
        'isflip',         0, ...
        'isnorm',         0, ...
        'concatenate',    0, ...
        'save',           1, ...
        'addrowcomment',  1, ...
        'addfilecomment', []);
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);
    disp('Scouts extracted successfully.');

    disp('=== Exporting matrix to CSV... ===');
    sFiles = bst_process('CallProcess', 'process_export_file', sFiles, [], ...
        'exportmatrix', {AutoCSV, 'ASCII-CSV-HDR'});
    ReportFile = bst_report('Save', sFiles);
    bst_report('Open', ReportFile);

    disp(['Successfully exported scouts to ', AutoCSV]);
end
